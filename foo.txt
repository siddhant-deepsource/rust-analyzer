{"reason":"compiler-artifact","package_id":"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs","edition":"2015","doctest":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/deps/liblazy_static-0a76da841b4d8a97.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex-syntax","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","edition":"2015","doctest":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/deps/libregex_syntax-01b9d0cbf8be9e3a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.2.1/build.rs","edition":"2015","doctest":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_std"],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/build/memchr-c03d3610aa5959d6/build-script-build","/Users/sidntrivedi012/Code/cap/target/debug/build/memchr-c03d3610aa5959d6/build-script-build.dSYM"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.2.0/build.rs","edition":"2015","doctest":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/build/bitflags-e21d4f0ad65f3251/build-script-build","/Users/sidntrivedi012/Code/cap/target/debug/build/bitflags-e21d4f0ad65f3251/build-script-build.dSYM"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)","linked_libs":[],"linked_paths":[],"cfgs":["memchr_runtime_simd","memchr_runtime_sse2","memchr_runtime_sse42","memchr_runtime_avx"],"env":[],"out_dir":"/Users/sidntrivedi012/Code/cap/target/debug/build/memchr-cea3cff192d2e8f5/out"}
{"reason":"compiler-artifact","package_id":"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["lib"],"crate_types":["lib"],"name":"thread_local","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/thread_local-0.3.6/src/lib.rs","edition":"2015","doctest":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/deps/libthread_local-7bc7304827031431.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)","linked_libs":[],"linked_paths":[],"cfgs":["bitflags_const_fn"],"env":[],"out_dir":"/Users/sidntrivedi012/Code/cap/target/debug/build/bitflags-57c1c16734c96a83/out"}
{"reason":"compiler-artifact","package_id":"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.2.1/src/lib.rs","edition":"2015","doctest":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_std"],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/deps/libmemchr-8e87db67434e05fd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.2.0/src/lib.rs","edition":"2015","doctest":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/deps/libbitflags-83887a79572a636c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.6/src/lib.rs","edition":"2015","doctest":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/deps/libaho_corasick-f5052ee1cb0d9e91.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/Users/sidntrivedi012/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","edition":"2015","doctest":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aho-corasick","default","memchr","perf","perf-cache","perf-dfa","perf-inline","perf-literal","std","thread_local","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/Users/sidntrivedi012/Code/cap/target/debug/deps/libregex-dde43177ccce1a35.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"warning: unneeded unit return type\n  --> src/tokenize.rs:39:22\n   |\n39 |     fn r#next(&self) -> ();\n   |                      ^^^^^ help: remove the `-> ()`\n   |\n   = note: `-W clippy::unused-unit` implied by `-W clippy::all`\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n\n","children":[{"children":[],"code":null,"level":"note","message":"`-W clippy::unused-unit` implied by `-W clippy::all`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the `-> ()`","rendered":null,"spans":[{"byte_end":885,"byte_start":880,"column_end":27,"column_start":22,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":null,"line_end":39,"line_start":39,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":27,"highlight_start":22,"text":"    fn r#next(&self) -> ();"}]}]}],"code":{"code":"clippy::unused_unit","explanation":null},"level":"warning","message":"unneeded unit return type","spans":[{"byte_end":885,"byte_start":880,"column_end":27,"column_start":22,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":null,"line_end":39,"line_start":39,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":22,"text":"    fn r#next(&self) -> ();"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"warning: unneeded unit return type\n  --> src/tokenize.rs:42:25\n   |\n42 |     fn nextToken(&self) -> ();\n   |                         ^^^^^ help: remove the `-> ()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n\n","children":[{"children":[],"code":null,"level":"help","message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the `-> ()`","rendered":null,"spans":[{"byte_end":1012,"byte_start":1007,"column_end":30,"column_start":25,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":null,"line_end":42,"line_start":42,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":25,"text":"    fn nextToken(&self) -> ();"}]}]}],"code":{"code":"clippy::unused_unit","explanation":null},"level":"warning","message":"unneeded unit return type","spans":[{"byte_end":1012,"byte_start":1007,"column_end":30,"column_start":25,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":null,"line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":25,"text":"    fn nextToken(&self) -> ();"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"warning: unneeded unit return type\n  --> src/tokenize.rs:43:25\n   |\n43 |     fn skipSpace(&self) -> ();\n   |                         ^^^^^ help: remove the `-> ()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n\n","children":[{"children":[],"code":null,"level":"help","message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the `-> ()`","rendered":null,"spans":[{"byte_end":1043,"byte_start":1038,"column_end":30,"column_start":25,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":25,"text":"    fn skipSpace(&self) -> ();"}]}]}],"code":{"code":"clippy::unused_unit","explanation":null},"level":"warning","message":"unneeded unit return type","spans":[{"byte_end":1043,"byte_start":1038,"column_end":30,"column_start":25,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":null,"line_end":43,"line_start":43,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":25,"text":"    fn skipSpace(&self) -> ();"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"warning: unneeded unit return type\n  --> src/tokenize.rs:44:49\n   |\n44 |     fn skipLineComment(&self, startSkip: usize) -> ();\n   |                                                 ^^^^^ help: remove the `-> ()`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n\n","children":[{"children":[],"code":null,"level":"help","message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the `-> ()`","rendered":null,"spans":[{"byte_end":1098,"byte_start":1093,"column_end":54,"column_start":49,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":54,"highlight_start":49,"text":"    fn skipLineComment(&self, startSkip: usize) -> ();"}]}]}],"code":{"code":"clippy::unused_unit","explanation":null},"level":"warning","message":"unneeded unit return type","spans":[{"byte_end":1098,"byte_start":1093,"column_end":54,"column_start":49,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":null,"line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":49,"text":"    fn skipLineComment(&self, startSkip: usize) -> ();"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `checkLVal` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:185:12\n    |\n185 |       self.checkLVal(left);\n    |            ^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `checkLVal` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `checkLVal` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `checkLVal` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":6606,"byte_start":6597,"column_end":21,"column_start":12,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"      self.checkLVal(left);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `buildBinary` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:268:23\n    |\n268 |       let node = self.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n    |                       ^^^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `buildBinary` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `buildBinary` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `buildBinary` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":9350,"byte_start":9339,"column_end":34,"column_start":23,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":268,"line_start":268,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":23,"text":"      let node = self.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `inFunction` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:284:36\n    |\n284 |       && (self.inAsync() || (!self.inFunction() && self.options.allowAwaitOutsideFunction))\n    |                                    ^^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `inFunction` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `inFunction` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `inFunction` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":9821,"byte_start":9811,"column_end":46,"column_start":36,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":284,"line_start":284,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":36,"text":"      && (self.inAsync() || (!self.inFunction() && self.options.allowAwaitOutsideFunction))"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `checkLVal` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:297:14\n    |\n297 |         self.checkLVal(node.argument);\n    |              ^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `checkLVal` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `checkLVal` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `checkLVal` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":10326,"byte_start":10317,"column_end":23,"column_start":14,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":297,"line_start":297,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":14,"text":"        self.checkLVal(node.argument);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `parseExprSubscripts` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:318:19\n    |\n318 |       expr = self.parseExprSubscripts(refDestructuringErrors);\n    |                   ^^^^^^^^^^^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `parseExprSubscripts` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `parseExprSubscripts` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `parseExprSubscripts` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":10896,"byte_start":10877,"column_end":38,"column_start":19,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":318,"line_start":318,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":19,"text":"      expr = self.parseExprSubscripts(refDestructuringErrors);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `canInsertSemicolon` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:322:42\n    |\n322 |       while self.r#type.postfix && !self.canInsertSemicolon() {\n    |                                          ^^^^^^^^^^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `canInsertSemicolon` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `canInsertSemicolon` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `canInsertSemicolon` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":11079,"byte_start":11061,"column_end":60,"column_start":42,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":322,"line_start":322,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":42,"text":"      while self.r#type.postfix && !self.canInsertSemicolon() {"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `checkLVal` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:327:14\n    |\n327 |         self.checkLVal(expr);\n    |              ^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `checkLVal` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `checkLVal` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `checkLVal` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":11280,"byte_start":11271,"column_end":23,"column_start":14,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":327,"line_start":327,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":14,"text":"        self.checkLVal(expr);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `buildBinary` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:334:12\n    |\n334 |       self.buildBinary(\n    |            ^^^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `buildBinary` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `buildBinary` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `buildBinary` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":11483,"byte_start":11472,"column_end":23,"column_start":12,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":334,"line_start":334,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":12,"text":"      self.buildBinary("}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0609]: no field `yieldPos` on type `state::Parser`\n   --> src/expression.rs:351:14\n    |\n351 |     if !self.yieldPos {\n    |              ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `options`, `input`, `containsEsc`, `pos`, `lineStart` ... and 18 others\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `options`, `input`, `containsEsc`, `pos`, `lineStart` ... and 18 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `yieldPos` on type `state::Parser`","spans":[{"byte_end":11742,"byte_start":11734,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"unknown field","line_end":351,"line_start":351,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"    if !self.yieldPos {"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0609]: no field `yieldPos` on type `state::Parser`\n   --> src/expression.rs:352:14\n    |\n352 |         self.yieldPos = self.start;\n    |              ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `options`, `input`, `containsEsc`, `pos`, `lineStart` ... and 18 others\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `options`, `input`, `containsEsc`, `pos`, `lineStart` ... and 18 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `yieldPos` on type `state::Parser`","spans":[{"byte_end":11766,"byte_start":11758,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"unknown field","line_end":352,"line_start":352,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        self.yieldPos = self.start;"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `canInsertSemiColon` found for struct `state::Parser` in the current scope\n   --> src/expression.rs:357:60\n    |\n357 |     if self.r#type == tokentype::TokenType::semi() || self.canInsertSemiColon() || (self.r#type != tokentype::TokenType::star() && !self....\n    |                                                            ^^^^^^^^^^^^^^^^^^ method not found in `state::Parser`\n    | \n   ::: src/state.rs:29:1\n    |\n29  | pub struct Parser {\n    | ----------------- method `canInsertSemiColon` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `canInsertSemiColon` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `canInsertSemiColon` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":11915,"byte_start":11897,"column_end":78,"column_start":60,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":357,"line_start":357,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":60,"text":"    if self.r#type == tokentype::TokenType::semi() || self.canInsertSemiColon() || (self.r#type != tokentype::TokenType::star() && !self.r#type.startsExpr) {"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0616]: field `startsExpr` of struct `tokentype::TokenType` is private\n   --> src/expression.rs:357:145\n    |\n357 | ...r#type != tokentype::TokenType::star() && !self.r#type.startsExpr) {\n    |                                                           ^^^^^^^^^^ private field\n\n","children":[],"code":{"code":"E0616","explanation":"Attempted to access a private field on a struct.\n\nErroneous code example:\n\n```compile_fail,E0616\nmod some_module {\n    pub struct Foo {\n        x: u32, // So `x` is private in here.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.x); // error: field `x` of struct `some_module::Foo` is private\n```\n\nIf you want to access this field, you have two options:\n\n1) Set the field public:\n\n```\nmod some_module {\n    pub struct Foo {\n        pub x: u32, // `x` is now public.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.x); // ok!\n```\n\n2) Add a getter function:\n\n```\nmod some_module {\n    pub struct Foo {\n        x: u32, // So `x` is still private in here.\n    }\n\n    impl Foo {\n        pub fn new() -> Foo { Foo { x: 0 } }\n\n        // We create the getter function here:\n        pub fn get_x(&self) -> &u32 { &self.x }\n    }\n}\n\nlet f = some_module::Foo::new();\nprintln!(\"{}\", f.get_x()); // ok!\n```\n"},"level":"error","message":"field `startsExpr` of struct `tokentype::TokenType` is private","spans":[{"byte_end":11992,"byte_start":11982,"column_end":155,"column_start":145,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"private field","line_end":357,"line_start":357,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":155,"highlight_start":145,"text":"    if self.r#type == tokentype::TokenType::semi() || self.canInsertSemiColon() || (self.r#type != tokentype::TokenType::star() && !self.r#type.startsExpr) {"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0609]: no field `delegate` on type `node::Node`\n   --> src/expression.rs:358:12\n    |\n358 |       node.delegate = false;\n    |            ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `type`, `start`, `end`, `body`, `local` ... and 17 others\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `type`, `start`, `end`, `body`, `local` ... and 17 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `delegate` on type `node::Node`","spans":[{"byte_end":12015,"byte_start":12007,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"unknown field","line_end":358,"line_start":358,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"      node.delegate = false;"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0609]: no field `delegate` on type `node::Node`\n   --> src/expression.rs:361:12\n    |\n361 |       node.delegate = self.eat(tokentype::TokenType::star());\n    |            ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `type`, `start`, `end`, `body`, `local` ... and 17 others\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `type`, `start`, `end`, `body`, `local` ... and 17 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `delegate` on type `node::Node`","spans":[{"byte_end":12085,"byte_start":12077,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"unknown field","line_end":361,"line_start":361,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"      node.delegate = self.eat(tokentype::TokenType::star());"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0609]: no field `awaitPos` on type `state::Parser`\n   --> src/expression.rs:368:16\n    |\n368 |       if !self.awaitPos {\n    |                ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `options`, `input`, `containsEsc`, `pos`, `lineStart` ... and 18 others\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `options`, `input`, `containsEsc`, `pos`, `lineStart` ... and 18 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `awaitPos` on type `state::Parser`","spans":[{"byte_end":12339,"byte_start":12331,"column_end":24,"column_start":16,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"unknown field","line_end":368,"line_start":368,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":16,"text":"      if !self.awaitPos {"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0609]: no field `awaitPos` on type `state::Parser`\n   --> src/expression.rs:369:16\n    |\n369 |           self.awaitPos = self.start;\n    |                ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `options`, `input`, `containsEsc`, `pos`, `lineStart` ... and 18 others\n\n","children":[{"children":[],"code":null,"level":"note","message":"available fields are: `options`, `input`, `containsEsc`, `pos`, `lineStart` ... and 18 others","rendered":null,"spans":[]}],"code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `awaitPos` on type `state::Parser`","spans":[{"byte_end":12365,"byte_start":12357,"column_end":24,"column_start":16,"expansion":null,"file_name":"src/expression.rs","is_primary":true,"label":"unknown field","line_end":369,"line_start":369,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":16,"text":"          self.awaitPos = self.start;"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `toAssignableList` found for struct `state::Parser` in the current scope\n  --> src/lval.rs:73:16\n   |\n73 |           self.toAssignableList(node.elements, isBinding);\n   |                ^^^^^^^^^^^^^^^^ method not found in `state::Parser`\n   | \n  ::: src/state.rs:29:1\n   |\n29 | pub struct Parser {\n   | ----------------- method `toAssignableList` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `toAssignableList` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `toAssignableList` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":2582,"byte_start":2566,"column_end":32,"column_start":16,"expansion":null,"file_name":"src/lval.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":73,"line_start":73,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":16,"text":"          self.toAssignableList(node.elements, isBinding);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `strictDirective` found for struct `state::Parser` in the current scope\n   --> src/state.rs:111:51\n    |\n29  | pub struct Parser {\n    | ----------------- method `strictDirective` not found for this\n...\n111 |         parser.strict = parser.inModule || parser.strictDirective(parser.pos);\n    |                                                   ^^^^^^^^^^^^^^^ method not found in `state::Parser`\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `strictDirective` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `strictDirective` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":3484,"byte_start":3469,"column_end":66,"column_start":51,"expansion":null,"file_name":"src/state.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":111,"line_start":111,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":51,"text":"        parser.strict = parser.inModule || parser.strictDirective(parser.pos);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `parseStatement` found for struct `state::Parser` in the current scope\n  --> src/statement.rs:30:29\n   |\n30 |             let stmt = self.parseStatement(None, true, exports);\n   |                             ^^^^^^^^^^^^^^ method not found in `state::Parser`\n   | \n  ::: src/state.rs:29:1\n   |\n29 | pub struct Parser {\n   | ----------------- method `parseStatement` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `parseStatement` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `parseStatement` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":899,"byte_start":885,"column_end":43,"column_start":29,"expansion":null,"file_name":"src/statement.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":29,"text":"            let stmt = self.parseStatement(None, true, exports);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `adaptDirectivePrologue` found for struct `state::Parser` in the current scope\n  --> src/statement.rs:41:14\n   |\n41 |         self.adaptDirectivePrologue(node.body);\n   |              ^^^^^^^^^^^^^^^^^^^^^^ method not found in `state::Parser`\n   | \n  ::: src/state.rs:29:1\n   |\n29 | pub struct Parser {\n   | ----------------- method `adaptDirectivePrologue` not found for this\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `adaptDirectivePrologue` found for struct `state::Parser` in the current scope","spans":[{"byte_end":674,"byte_start":657,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/state.rs","is_primary":false,"label":"method `adaptDirectivePrologue` not found for this","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":1,"text":"pub struct Parser {"}]},{"byte_end":1295,"byte_start":1273,"column_end":36,"column_start":14,"expansion":null,"file_name":"src/statement.rs","is_primary":true,"label":"method not found in `state::Parser`","line_end":41,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":14,"text":"        self.adaptDirectivePrologue(node.body);"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error[E0599]: no method named `skipBlockComment` found for reference `&state::Parser` in the current scope\n  --> src/tokenize.rs:87:32\n   |\n87 |                     42 => self.skipBlockComment(),\n   |                                ^^^^^^^^^^^^^^^^ method not found in `&state::Parser`\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `skipBlockComment` found for reference `&state::Parser` in the current scope","spans":[{"byte_end":2403,"byte_start":2387,"column_end":48,"column_start":32,"expansion":null,"file_name":"src/tokenize.rs","is_primary":true,"label":"method not found in `&state::Parser`","line_end":87,"line_start":87,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":32,"text":"                    42 => self.skipBlockComment(),"}]}]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"error: aborting due to 21 previous errors; 4 warnings emitted\n\n","children":[],"code":null,"level":"error","message":"aborting due to 21 previous errors; 4 warnings emitted","spans":[]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"Some errors have detailed explanations: E0599, E0609, E0616.\n","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0599, E0609, E0616.","spans":[]}}
{"reason":"compiler-message","package_id":"cap 0.1.0 (path+file:///Users/sidntrivedi012/Code/cap)","target":{"kind":["lib"],"crate_types":["lib"],"name":"cap","src_path":"/Users/sidntrivedi012/Code/cap/src/lib.rs","edition":"2018","doctest":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0599`.\n","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0599`.","spans":[]}}
{"reason":"build-finished","success":false}
